datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  SHOPPER
  STORE
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String          @unique
  password      String
  role          Role            @default(SHOPPER)
  UUID          String          @default(cuid()) @unique
  name          String
  lastName      String
  phone         String?
  address       Address?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  store         Store?
  hasStore      Boolean         @default(false)
  cart          Cart?           
  orders        Order[]
  reviews       Review[]
  favoriteList  FavoriteList?
}


model Address {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  street        String?
  city          String?
  country       String?
  postalCode    String?
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @db.ObjectId @unique
}


model Store {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String          @unique
  description   String
  storePhone    String   
  user          User            @relation(fields: [userId], references: [id])         
  userId        String          @db.ObjectId @unique
  products      Product[]
  slug          String          @unique
  orders        OrderItem[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Product {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  price         String
  store         Store           @relation(fields: [storeId], references: [id])
  storeId       String          @db.ObjectId
  category      String[]
  // image is optional for now until i make image handler
  image         String?
  slug          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  orderItems    OrderItem[]
  cartItems     CartItem[]
  quantity      Int             @default(1)
  isActive      Boolean         @default(true)
  reviews       Review[]
  details       String
  specifications  String?
  favoriteItems   FavoriteItem[]
}

model CartItem {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  cart          Cart            @relation(fields: [cartId], references: [id])
  cartId        String          @db.ObjectId
  product       Product         @relation(fields: [productId], references: [id])
  productId     String          @db.ObjectId
  quantity      Int             @default(1)
}

model Cart {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @db.ObjectId @unique
  cartItems     CartItem[]       
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model FavoriteList {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @db.ObjectId @unique
  products      FavoriteItem[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model FavoriteItem{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  favoriteList  FavoriteList    @relation(fields: [favoriteListId], references: [id])
  favoriteListId  String        @db.ObjectId
  product         Product       @relation(fields: [productId], references: [id])
  productId       String        @db.ObjectId
  addedAt         DateTime      @default(now())
}


model Order {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @db.ObjectId
  orderItems    OrderItem[]     
  total         Float
  status        String          @default("pending")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model OrderItem {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  order         Order           @relation(fields: [orderId], references: [id])
  orderId       String          @db.ObjectId
  product       Product         @relation(fields: [productId], references: [id])
  productId     String          @db.ObjectId
  store         Store           @relation(fields: [storeId], references: [id])
  storeId       String          @db.ObjectId
  quantity      Int
  priceAtOrder  Float         
  status        String          @default("pending") 
}

model Review {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @db.ObjectId
  product       Product         @relation(fields: [productId], references: [id])
  productId     String          @db.ObjectId
  rating        Int             
  comment       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}